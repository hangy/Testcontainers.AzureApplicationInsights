name: Release
on:
  push:
    branches:
      - main
      - next
      - beta
      - "*.x"
      - ci
  workflow_dispatch:

permissions:
  contents: read # for checkout

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: hangy/azure-appinsights-emulator

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
      packages: write # to be able to publish to GitHub Packages
      attestations: write # to be able to attest build provenance
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json
      - name: Restore dependencies
        run: dotnet restore
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Restore .NET tools
        run: dotnet tool restore
      - name: Restore .NET dependencies
        run: dotnet restore --force-evaluate
      - name: Build
        run: dotnet build -c Release --no-restore
      - name: Install npm dependencies
        run: npm clean-install
      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures
      - name: Build linux-x64 container
        id: build-linux-x64
        run: |
          echo "HASH=$(dotnet publish --no-restore --os linux --arch x64 /t:PublishContainer --getProperty:GeneratedContainerDigest src/hangy.Testcontainers.AzureApplicationInsights.Server/hangy.Testcontainers.AzureApplicationInsights.Server.csproj)" >> "$GITHUB_OUTPUT"
          source "$GITHUB_OUTPUT"
          echo docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}@"$HASH"
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}@"$HASH"
      - name: Build linux-arm container
        id: build-linux-arm
        run: |
          echo "HASH=$(dotnet publish --no-restore --os linux --arch arm /t:PublishContainer --getProperty:GeneratedContainerDigest src/hangy.Testcontainers.AzureApplicationInsights.Server/hangy.Testcontainers.AzureApplicationInsights.Server.csproj)" >> "$GITHUB_OUTPUT"
          source "$GITHUB_OUTPUT"
          echo docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}@"$HASH"
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}@"$HASH"
      - name: Build linux-arm64 container
        id: build-linux-arm64
        run: |
          echo "HASH=$(dotnet publish --no-restore --os linux --arch arm64 /t:PublishContainer --getProperty:GeneratedContainerDigest src/hangy.Testcontainers.AzureApplicationInsights.Server/hangy.Testcontainers.AzureApplicationInsights.Server.csproj)" >> "$GITHUB_OUTPUT"
          source "$GITHUB_OUTPUT"
          echo docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}@"$HASH"
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}@"$HASH"
      - name: Generate artifact attestation linux-x64
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build-linux-x64.outputs.HASH }}
          push-to-registry: true
      - name: Generate artifact attestation linux-arm
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build-linux-arm.outputs.HASH }}
          push-to-registry: true
      - name: Generate artifact attestation linux-arm64
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build-linux-arm64.outputs.HASH }}
          push-to-registry: true
      - name: Create manifest list and push
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-linux-x64.outputs.HASH }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-linux-arm.outputs.HASH }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-linux-arm64.outputs.HASH }}
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
